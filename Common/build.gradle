apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {

    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {

        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["constraint"]
    api rootProject.ext.dependencies["design"]

    api rootProject.ext.dependencies["multidex"]

    // retrofit
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["retrofit-convert-gson"]
    api rootProject.ext.dependencies["retrofit-adapter-rxJava"]
    // okHttp
    api rootProject.ext.dependencies["okhttp"]
    // RxJava
    api rootProject.ext.dependencies["rxJava"]
    api rootProject.ext.dependencies["rxAndroid"]

    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["fastJson"]

    api rootProject.ext.dependencies["eventBus"]

    // ButterKnife
    api rootProject.ext.dependencies["butterKnife"]
    annotationProcessor rootProject.ext.dependencies["butterKnife-compiler"]

    api rootProject.ext.dependencies["glide"]
    api rootProject.ext.dependencies["photoView"]

    api rootProject.ext.dependencies["recyclerView"]
    api rootProject.ext.dependencies["XRecyclerView"]

}


// region --------------------------------------- 配置发布到jCenter ---------------------------------------

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

//项目主页--项目的GitHub地址
def siteUrl = 'http://47.96.187.51:3001/mobile-WYGL/Android-RongC'
//项目的git地址
def gitUrl = 'http://47.96.187.51:3001/mobile-WYGL/Android-RongC.git'

//发布到JCenter上的项目名字
def libName = "Common"
//compile引用时的第1部分,第二部分为此model的名称，不是JCenter的名称
group = "com.newsee"
// 版本号，//compile引用时的最后部分项目名，下次更新是只需要更改版本号即可
version = "1.0.0"
//上面配置后上传至JCenter后的编译路径是这样的： compile 'com.newsee:Common:1.0.0'

//生成源文件
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

//生成Javadoc文档
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

//文档打包成jar
// 注释1
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

//拷贝javadoc文件
task copyDoc(type: Copy) {
    from "${buildDir}/docs/"
    into "docs"
}

//上传到JCenter所需要的源码文件
artifacts {

    // 注释2
//    archives javadocJar
    archives sourcesJar
}

// 配置maven库，生成POM.xml文件
install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'
                //项目描述，自由填写
                name '移动物管通用组件库'
                url siteUrl
                licenses {
                    license {
                        //开源协议
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        //开发者的个人信息，根据个人信息填写
                        id 'hwy'
                        name 'hewenyu'
                        email 'he875027547@126.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

//上传到JCenter
Properties properties = new Properties()
properties.load(project.rootProject.file('Common\\jcenter.properties').newDataInputStream())


bintray {
    user = 'shanjunpeng'    //读取 jcenter.properties 文件里面的 bintray.user
    key = '8334bb72e9acbecbedcf69a7e1fe01b5578b0e55'   //读取 jcenter.properties 文件里面的 bintray.apikey
    configurations = ['archives']
    pkg {
        //这里的repo值必须要和你创建Maven仓库的时候的名字一样，我们前面创建的就是maven
        repo = "AndroidCommon"
        //发布到JCenter上的项目名字
        name = libName
        //项目描述
        desc = 'Android 基础组件库'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}

javadoc {
    options {
        //如果你的项目里面有中文注释的话，必须将格式设置为UTF-8，不然会出现乱码
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
    }
}

//gradlew install
// gradlew bintrayUpload

// endregion ----------------------------------------------------------------------------------------------